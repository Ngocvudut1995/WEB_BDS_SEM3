#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WEB_TRACUU.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BatDongSan")]
	public partial class DataTraCuuVPDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcreage(Acreage instance);
    partial void UpdateAcreage(Acreage instance);
    partial void DeleteAcreage(Acreage instance);
    partial void InsertWard(Ward instance);
    partial void UpdateWard(Ward instance);
    partial void DeleteWard(Ward instance);
    partial void InsertConvenient(Convenient instance);
    partial void UpdateConvenient(Convenient instance);
    partial void DeleteConvenient(Convenient instance);
    partial void InsertConvenient_Detail(Convenient_Detail instance);
    partial void UpdateConvenient_Detail(Convenient_Detail instance);
    partial void DeleteConvenient_Detail(Convenient_Detail instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDirection(Direction instance);
    partial void UpdateDirection(Direction instance);
    partial void DeleteDirection(Direction instance);
    partial void InsertFollow(Follow instance);
    partial void UpdateFollow(Follow instance);
    partial void DeleteFollow(Follow instance);
    partial void InsertFuriture(Furiture instance);
    partial void UpdateFuriture(Furiture instance);
    partial void DeleteFuriture(Furiture instance);
    partial void InsertFuriture_detail(Furiture_detail instance);
    partial void UpdateFuriture_detail(Furiture_detail instance);
    partial void DeleteFuriture_detail(Furiture_detail instance);
    partial void InsertImage_Detail(Image_Detail instance);
    partial void UpdateImage_Detail(Image_Detail instance);
    partial void DeleteImage_Detail(Image_Detail instance);
    partial void InsertInternetProtocol(InternetProtocol instance);
    partial void UpdateInternetProtocol(InternetProtocol instance);
    partial void DeleteInternetProtocol(InternetProtocol instance);
    partial void InsertLand(Land instance);
    partial void UpdateLand(Land instance);
    partial void DeleteLand(Land instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertStreet(Street instance);
    partial void UpdateStreet(Street instance);
    partial void DeleteStreet(Street instance);
    partial void InsertTypeDetail(TypeDetail instance);
    partial void UpdateTypeDetail(TypeDetail instance);
    partial void DeleteTypeDetail(TypeDetail instance);
    partial void InsertTypeLand(TypeLand instance);
    partial void UpdateTypeLand(TypeLand instance);
    partial void DeleteTypeLand(TypeLand instance);
    partial void InsertTrouser(Trouser instance);
    partial void UpdateTrouser(Trouser instance);
    partial void DeleteTrouser(Trouser instance);
    #endregion
		
		public DataTraCuuVPDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BatDongSanConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataTraCuuVPDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataTraCuuVPDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataTraCuuVPDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataTraCuuVPDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Acreage> Acreages
		{
			get
			{
				return this.GetTable<Acreage>();
			}
		}
		
		public System.Data.Linq.Table<Ward> Wards
		{
			get
			{
				return this.GetTable<Ward>();
			}
		}
		
		public System.Data.Linq.Table<Convenient> Convenients
		{
			get
			{
				return this.GetTable<Convenient>();
			}
		}
		
		public System.Data.Linq.Table<Convenient_Detail> Convenient_Details
		{
			get
			{
				return this.GetTable<Convenient_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Direction> Directions
		{
			get
			{
				return this.GetTable<Direction>();
			}
		}
		
		public System.Data.Linq.Table<Follow> Follows
		{
			get
			{
				return this.GetTable<Follow>();
			}
		}
		
		public System.Data.Linq.Table<Furiture> Furitures
		{
			get
			{
				return this.GetTable<Furiture>();
			}
		}
		
		public System.Data.Linq.Table<Furiture_detail> Furiture_details
		{
			get
			{
				return this.GetTable<Furiture_detail>();
			}
		}
		
		public System.Data.Linq.Table<Image_Detail> Image_Details
		{
			get
			{
				return this.GetTable<Image_Detail>();
			}
		}
		
		public System.Data.Linq.Table<InternetProtocol> InternetProtocols
		{
			get
			{
				return this.GetTable<InternetProtocol>();
			}
		}
		
		public System.Data.Linq.Table<Land> Lands
		{
			get
			{
				return this.GetTable<Land>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<Street> Streets
		{
			get
			{
				return this.GetTable<Street>();
			}
		}
		
		public System.Data.Linq.Table<TypeDetail> TypeDetails
		{
			get
			{
				return this.GetTable<TypeDetail>();
			}
		}
		
		public System.Data.Linq.Table<TypeLand> TypeLands
		{
			get
			{
				return this.GetTable<TypeLand>();
			}
		}
		
		public System.Data.Linq.Table<Trouser> Trousers
		{
			get
			{
				return this.GetTable<Trouser>();
			}
		}
		
		public System.Data.Linq.Table<Overview_Land> Overview_Lands
		{
			get
			{
				return this.GetTable<Overview_Land>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Acreage")]
	public partial class Acreage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAcreage;
		
		private string _Acreage1;
		
		private EntitySet<Land> _Lands;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAcreageChanging(int value);
    partial void OnIDAcreageChanged();
    partial void OnAcreage1Changing(string value);
    partial void OnAcreage1Changed();
    #endregion
		
		public Acreage()
		{
			this._Lands = new EntitySet<Land>(new Action<Land>(this.attach_Lands), new Action<Land>(this.detach_Lands));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAcreage", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDAcreage
		{
			get
			{
				return this._IDAcreage;
			}
			set
			{
				if ((this._IDAcreage != value))
				{
					this.OnIDAcreageChanging(value);
					this.SendPropertyChanging();
					this._IDAcreage = value;
					this.SendPropertyChanged("IDAcreage");
					this.OnIDAcreageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Acreage", Storage="_Acreage1", DbType="VarChar(200)")]
		public string Acreage1
		{
			get
			{
				return this._Acreage1;
			}
			set
			{
				if ((this._Acreage1 != value))
				{
					this.OnAcreage1Changing(value);
					this.SendPropertyChanging();
					this._Acreage1 = value;
					this.SendPropertyChanged("Acreage1");
					this.OnAcreage1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Acreage_Land", Storage="_Lands", ThisKey="IDAcreage", OtherKey="IDAcreage")]
		public EntitySet<Land> Lands
		{
			get
			{
				return this._Lands;
			}
			set
			{
				this._Lands.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Acreage = this;
		}
		
		private void detach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Acreage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ward")]
	public partial class Ward : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDWard;
		
		private string _Ward1;
		
		private int _IDTrousers;
		
		private EntitySet<Land> _Lands;
		
		private EntitySet<Street> _Streets;
		
		private EntityRef<Trouser> _Trouser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDWardChanging(int value);
    partial void OnIDWardChanged();
    partial void OnWard1Changing(string value);
    partial void OnWard1Changed();
    partial void OnIDTrousersChanging(int value);
    partial void OnIDTrousersChanged();
    #endregion
		
		public Ward()
		{
			this._Lands = new EntitySet<Land>(new Action<Land>(this.attach_Lands), new Action<Land>(this.detach_Lands));
			this._Streets = new EntitySet<Street>(new Action<Street>(this.attach_Streets), new Action<Street>(this.detach_Streets));
			this._Trouser = default(EntityRef<Trouser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWard", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDWard
		{
			get
			{
				return this._IDWard;
			}
			set
			{
				if ((this._IDWard != value))
				{
					this.OnIDWardChanging(value);
					this.SendPropertyChanging();
					this._IDWard = value;
					this.SendPropertyChanged("IDWard");
					this.OnIDWardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Ward", Storage="_Ward1", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Ward1
		{
			get
			{
				return this._Ward1;
			}
			set
			{
				if ((this._Ward1 != value))
				{
					this.OnWard1Changing(value);
					this.SendPropertyChanging();
					this._Ward1 = value;
					this.SendPropertyChanged("Ward1");
					this.OnWard1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTrousers", DbType="Int NOT NULL")]
		public int IDTrousers
		{
			get
			{
				return this._IDTrousers;
			}
			set
			{
				if ((this._IDTrousers != value))
				{
					if (this._Trouser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTrousersChanging(value);
					this.SendPropertyChanging();
					this._IDTrousers = value;
					this.SendPropertyChanged("IDTrousers");
					this.OnIDTrousersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Land", Storage="_Lands", ThisKey="IDWard", OtherKey="IDWard")]
		public EntitySet<Land> Lands
		{
			get
			{
				return this._Lands;
			}
			set
			{
				this._Lands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Street", Storage="_Streets", ThisKey="IDWard", OtherKey="IDWard")]
		public EntitySet<Street> Streets
		{
			get
			{
				return this._Streets;
			}
			set
			{
				this._Streets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trouser_Ward", Storage="_Trouser", ThisKey="IDTrousers", OtherKey="IDTrousers", IsForeignKey=true)]
		public Trouser Trouser
		{
			get
			{
				return this._Trouser.Entity;
			}
			set
			{
				Trouser previousValue = this._Trouser.Entity;
				if (((previousValue != value) 
							|| (this._Trouser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trouser.Entity = null;
						previousValue.Wards.Remove(this);
					}
					this._Trouser.Entity = value;
					if ((value != null))
					{
						value.Wards.Add(this);
						this._IDTrousers = value.IDTrousers;
					}
					else
					{
						this._IDTrousers = default(int);
					}
					this.SendPropertyChanged("Trouser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Ward = this;
		}
		
		private void detach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Ward = null;
		}
		
		private void attach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.Ward = this;
		}
		
		private void detach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.Ward = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Convenient")]
	public partial class Convenient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDConvenient;
		
		private string _Convenient_Name;
		
		private string _Image;
		
		private EntitySet<Convenient_Detail> _Convenient_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDConvenientChanging(int value);
    partial void OnIDConvenientChanged();
    partial void OnConvenient_NameChanging(string value);
    partial void OnConvenient_NameChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Convenient()
		{
			this._Convenient_Details = new EntitySet<Convenient_Detail>(new Action<Convenient_Detail>(this.attach_Convenient_Details), new Action<Convenient_Detail>(this.detach_Convenient_Details));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDConvenient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDConvenient
		{
			get
			{
				return this._IDConvenient;
			}
			set
			{
				if ((this._IDConvenient != value))
				{
					this.OnIDConvenientChanging(value);
					this.SendPropertyChanging();
					this._IDConvenient = value;
					this.SendPropertyChanged("IDConvenient");
					this.OnIDConvenientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Convenient_Name", DbType="NVarChar(50)")]
		public string Convenient_Name
		{
			get
			{
				return this._Convenient_Name;
			}
			set
			{
				if ((this._Convenient_Name != value))
				{
					this.OnConvenient_NameChanging(value);
					this.SendPropertyChanging();
					this._Convenient_Name = value;
					this.SendPropertyChanged("Convenient_Name");
					this.OnConvenient_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Convenient_Convenient_Detail", Storage="_Convenient_Details", ThisKey="IDConvenient", OtherKey="IDConvenient")]
		public EntitySet<Convenient_Detail> Convenient_Details
		{
			get
			{
				return this._Convenient_Details;
			}
			set
			{
				this._Convenient_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Convenient_Details(Convenient_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Convenient = this;
		}
		
		private void detach_Convenient_Details(Convenient_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Convenient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Convenient_Detail")]
	public partial class Convenient_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDLand;
		
		private int _IDConvenient;
		
		private EntityRef<Convenient> _Convenient;
		
		private EntityRef<Land> _Land;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLandChanging(System.Guid value);
    partial void OnIDLandChanged();
    partial void OnIDConvenientChanging(int value);
    partial void OnIDConvenientChanged();
    #endregion
		
		public Convenient_Detail()
		{
			this._Convenient = default(EntityRef<Convenient>);
			this._Land = default(EntityRef<Land>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLand", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDLand
		{
			get
			{
				return this._IDLand;
			}
			set
			{
				if ((this._IDLand != value))
				{
					if (this._Land.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLandChanging(value);
					this.SendPropertyChanging();
					this._IDLand = value;
					this.SendPropertyChanged("IDLand");
					this.OnIDLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDConvenient", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDConvenient
		{
			get
			{
				return this._IDConvenient;
			}
			set
			{
				if ((this._IDConvenient != value))
				{
					if (this._Convenient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDConvenientChanging(value);
					this.SendPropertyChanging();
					this._IDConvenient = value;
					this.SendPropertyChanged("IDConvenient");
					this.OnIDConvenientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Convenient_Convenient_Detail", Storage="_Convenient", ThisKey="IDConvenient", OtherKey="IDConvenient", IsForeignKey=true)]
		public Convenient Convenient
		{
			get
			{
				return this._Convenient.Entity;
			}
			set
			{
				Convenient previousValue = this._Convenient.Entity;
				if (((previousValue != value) 
							|| (this._Convenient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Convenient.Entity = null;
						previousValue.Convenient_Details.Remove(this);
					}
					this._Convenient.Entity = value;
					if ((value != null))
					{
						value.Convenient_Details.Add(this);
						this._IDConvenient = value.IDConvenient;
					}
					else
					{
						this._IDConvenient = default(int);
					}
					this.SendPropertyChanged("Convenient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Convenient_Detail", Storage="_Land", ThisKey="IDLand", OtherKey="IDLand", IsForeignKey=true)]
		public Land Land
		{
			get
			{
				return this._Land.Entity;
			}
			set
			{
				Land previousValue = this._Land.Entity;
				if (((previousValue != value) 
							|| (this._Land.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Land.Entity = null;
						previousValue.Convenient_Details.Remove(this);
					}
					this._Land.Entity = value;
					if ((value != null))
					{
						value.Convenient_Details.Add(this);
						this._IDLand = value.IDLand;
					}
					else
					{
						this._IDLand = default(System.Guid);
					}
					this.SendPropertyChanged("Land");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDCustomer;
		
		private string _CustomerName;
		
		private string _Organization;
		
		private string _Address;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _CMND;
		
		private string _Username;
		
		private string _Pass;
		
		private System.Nullable<bool> _Flag_Active;
		
		private System.Nullable<bool> _Admin;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<bool> _Gender;
		
		private EntitySet<Follow> _Follows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCMNDChanging(string value);
    partial void OnCMNDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnFlag_ActiveChanging(System.Nullable<bool> value);
    partial void OnFlag_ActiveChanged();
    partial void OnAdminChanging(System.Nullable<bool> value);
    partial void OnAdminChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    #endregion
		
		public Customer()
		{
			this._Follows = new EntitySet<Follow>(new Action<Follow>(this.attach_Follows), new Action<Follow>(this.detach_Follows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(30)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organization", DbType="NVarChar(30)")]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMND", DbType="VarChar(15)")]
		public string CMND
		{
			get
			{
				return this._CMND;
			}
			set
			{
				if ((this._CMND != value))
				{
					this.OnCMNDChanging(value);
					this.SendPropertyChanging();
					this._CMND = value;
					this.SendPropertyChanged("CMND");
					this.OnCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(50)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag_Active", DbType="Bit")]
		public System.Nullable<bool> Flag_Active
		{
			get
			{
				return this._Flag_Active;
			}
			set
			{
				if ((this._Flag_Active != value))
				{
					this.OnFlag_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Flag_Active = value;
					this.SendPropertyChanged("Flag_Active");
					this.OnFlag_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Bit")]
		public System.Nullable<bool> Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("Admin");
					this.OnAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Follow", Storage="_Follows", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<Follow> Follows
		{
			get
			{
				return this._Follows;
			}
			set
			{
				this._Follows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Direction")]
	public partial class Direction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDirection;
		
		private string _Direction1;
		
		private EntitySet<Land> _Lands;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDirectionChanging(int value);
    partial void OnIDDirectionChanged();
    partial void OnDirection1Changing(string value);
    partial void OnDirection1Changed();
    #endregion
		
		public Direction()
		{
			this._Lands = new EntitySet<Land>(new Action<Land>(this.attach_Lands), new Action<Land>(this.detach_Lands));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDirection", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDirection
		{
			get
			{
				return this._IDDirection;
			}
			set
			{
				if ((this._IDDirection != value))
				{
					this.OnIDDirectionChanging(value);
					this.SendPropertyChanging();
					this._IDDirection = value;
					this.SendPropertyChanged("IDDirection");
					this.OnIDDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Direction", Storage="_Direction1", DbType="NVarChar(50)")]
		public string Direction1
		{
			get
			{
				return this._Direction1;
			}
			set
			{
				if ((this._Direction1 != value))
				{
					this.OnDirection1Changing(value);
					this.SendPropertyChanging();
					this._Direction1 = value;
					this.SendPropertyChanged("Direction1");
					this.OnDirection1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_Land", Storage="_Lands", ThisKey="IDDirection", OtherKey="IDDirection")]
		public EntitySet<Land> Lands
		{
			get
			{
				return this._Lands;
			}
			set
			{
				this._Lands.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Direction = this;
		}
		
		private void detach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Direction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Follow")]
	public partial class Follow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDLand;
		
		private System.Guid _IDCustomer;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Land> _Land;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLandChanging(System.Guid value);
    partial void OnIDLandChanged();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    #endregion
		
		public Follow()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Land = default(EntityRef<Land>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLand", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDLand
		{
			get
			{
				return this._IDLand;
			}
			set
			{
				if ((this._IDLand != value))
				{
					if (this._Land.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLandChanging(value);
					this.SendPropertyChanging();
					this._IDLand = value;
					this.SendPropertyChanged("IDLand");
					this.OnIDLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Follow", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Follows.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Follows.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Follow", Storage="_Land", ThisKey="IDLand", OtherKey="IDLand", IsForeignKey=true)]
		public Land Land
		{
			get
			{
				return this._Land.Entity;
			}
			set
			{
				Land previousValue = this._Land.Entity;
				if (((previousValue != value) 
							|| (this._Land.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Land.Entity = null;
						previousValue.Follows.Remove(this);
					}
					this._Land.Entity = value;
					if ((value != null))
					{
						value.Follows.Add(this);
						this._IDLand = value.IDLand;
					}
					else
					{
						this._IDLand = default(System.Guid);
					}
					this.SendPropertyChanged("Land");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Furiture")]
	public partial class Furiture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDFuriture;
		
		private string _Furiture_Name;
		
		private string _Image;
		
		private EntitySet<Furiture_detail> _Furiture_details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDFuritureChanging(int value);
    partial void OnIDFuritureChanged();
    partial void OnFuriture_NameChanging(string value);
    partial void OnFuriture_NameChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Furiture()
		{
			this._Furiture_details = new EntitySet<Furiture_detail>(new Action<Furiture_detail>(this.attach_Furiture_details), new Action<Furiture_detail>(this.detach_Furiture_details));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDFuriture", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDFuriture
		{
			get
			{
				return this._IDFuriture;
			}
			set
			{
				if ((this._IDFuriture != value))
				{
					this.OnIDFuritureChanging(value);
					this.SendPropertyChanging();
					this._IDFuriture = value;
					this.SendPropertyChanged("IDFuriture");
					this.OnIDFuritureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Furiture_Name", DbType="NVarChar(50)")]
		public string Furiture_Name
		{
			get
			{
				return this._Furiture_Name;
			}
			set
			{
				if ((this._Furiture_Name != value))
				{
					this.OnFuriture_NameChanging(value);
					this.SendPropertyChanging();
					this._Furiture_Name = value;
					this.SendPropertyChanged("Furiture_Name");
					this.OnFuriture_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Furiture_Furiture_detail", Storage="_Furiture_details", ThisKey="IDFuriture", OtherKey="IDFuriture")]
		public EntitySet<Furiture_detail> Furiture_details
		{
			get
			{
				return this._Furiture_details;
			}
			set
			{
				this._Furiture_details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Furiture_details(Furiture_detail entity)
		{
			this.SendPropertyChanging();
			entity.Furiture = this;
		}
		
		private void detach_Furiture_details(Furiture_detail entity)
		{
			this.SendPropertyChanging();
			entity.Furiture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Furiture_detail")]
	public partial class Furiture_detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDLand;
		
		private int _IDFuriture;
		
		private EntityRef<Furiture> _Furiture;
		
		private EntityRef<Land> _Land;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLandChanging(System.Guid value);
    partial void OnIDLandChanged();
    partial void OnIDFuritureChanging(int value);
    partial void OnIDFuritureChanged();
    #endregion
		
		public Furiture_detail()
		{
			this._Furiture = default(EntityRef<Furiture>);
			this._Land = default(EntityRef<Land>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLand", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDLand
		{
			get
			{
				return this._IDLand;
			}
			set
			{
				if ((this._IDLand != value))
				{
					if (this._Land.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLandChanging(value);
					this.SendPropertyChanging();
					this._IDLand = value;
					this.SendPropertyChanged("IDLand");
					this.OnIDLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDFuriture", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDFuriture
		{
			get
			{
				return this._IDFuriture;
			}
			set
			{
				if ((this._IDFuriture != value))
				{
					if (this._Furiture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFuritureChanging(value);
					this.SendPropertyChanging();
					this._IDFuriture = value;
					this.SendPropertyChanged("IDFuriture");
					this.OnIDFuritureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Furiture_Furiture_detail", Storage="_Furiture", ThisKey="IDFuriture", OtherKey="IDFuriture", IsForeignKey=true)]
		public Furiture Furiture
		{
			get
			{
				return this._Furiture.Entity;
			}
			set
			{
				Furiture previousValue = this._Furiture.Entity;
				if (((previousValue != value) 
							|| (this._Furiture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Furiture.Entity = null;
						previousValue.Furiture_details.Remove(this);
					}
					this._Furiture.Entity = value;
					if ((value != null))
					{
						value.Furiture_details.Add(this);
						this._IDFuriture = value.IDFuriture;
					}
					else
					{
						this._IDFuriture = default(int);
					}
					this.SendPropertyChanged("Furiture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Furiture_detail", Storage="_Land", ThisKey="IDLand", OtherKey="IDLand", IsForeignKey=true)]
		public Land Land
		{
			get
			{
				return this._Land.Entity;
			}
			set
			{
				Land previousValue = this._Land.Entity;
				if (((previousValue != value) 
							|| (this._Land.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Land.Entity = null;
						previousValue.Furiture_details.Remove(this);
					}
					this._Land.Entity = value;
					if ((value != null))
					{
						value.Furiture_details.Add(this);
						this._IDLand = value.IDLand;
					}
					else
					{
						this._IDLand = default(System.Guid);
					}
					this.SendPropertyChanged("Land");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image_Detail")]
	public partial class Image_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDImage_Detail;
		
		private System.Guid _IDLand;
		
		private string _Image_detail1;
		
		private string _Title;
		
		private EntityRef<Land> _Land;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDImage_DetailChanging(int value);
    partial void OnIDImage_DetailChanged();
    partial void OnIDLandChanging(System.Guid value);
    partial void OnIDLandChanged();
    partial void OnImage_detail1Changing(string value);
    partial void OnImage_detail1Changed();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Image_Detail()
		{
			this._Land = default(EntityRef<Land>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDImage_Detail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDImage_Detail
		{
			get
			{
				return this._IDImage_Detail;
			}
			set
			{
				if ((this._IDImage_Detail != value))
				{
					this.OnIDImage_DetailChanging(value);
					this.SendPropertyChanging();
					this._IDImage_Detail = value;
					this.SendPropertyChanged("IDImage_Detail");
					this.OnIDImage_DetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLand", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDLand
		{
			get
			{
				return this._IDLand;
			}
			set
			{
				if ((this._IDLand != value))
				{
					if (this._Land.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLandChanging(value);
					this.SendPropertyChanging();
					this._IDLand = value;
					this.SendPropertyChanged("IDLand");
					this.OnIDLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Image_detail", Storage="_Image_detail1", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Image_detail1
		{
			get
			{
				return this._Image_detail1;
			}
			set
			{
				if ((this._Image_detail1 != value))
				{
					this.OnImage_detail1Changing(value);
					this.SendPropertyChanging();
					this._Image_detail1 = value;
					this.SendPropertyChanged("Image_detail1");
					this.OnImage_detail1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Image_Detail", Storage="_Land", ThisKey="IDLand", OtherKey="IDLand", IsForeignKey=true)]
		public Land Land
		{
			get
			{
				return this._Land.Entity;
			}
			set
			{
				Land previousValue = this._Land.Entity;
				if (((previousValue != value) 
							|| (this._Land.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Land.Entity = null;
						previousValue.Image_Details.Remove(this);
					}
					this._Land.Entity = value;
					if ((value != null))
					{
						value.Image_Details.Add(this);
						this._IDLand = value.IDLand;
					}
					else
					{
						this._IDLand = default(System.Guid);
					}
					this.SendPropertyChanged("Land");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InternetProtocol")]
	public partial class InternetProtocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stt;
		
		private System.Nullable<System.Guid> _idLand;
		
		private string _ip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsttChanging(int value);
    partial void OnsttChanged();
    partial void OnidLandChanging(System.Nullable<System.Guid> value);
    partial void OnidLandChanged();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    #endregion
		
		public InternetProtocol()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stt", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stt
		{
			get
			{
				return this._stt;
			}
			set
			{
				if ((this._stt != value))
				{
					this.OnsttChanging(value);
					this.SendPropertyChanging();
					this._stt = value;
					this.SendPropertyChanged("stt");
					this.OnsttChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLand", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> idLand
		{
			get
			{
				return this._idLand;
			}
			set
			{
				if ((this._idLand != value))
				{
					this.OnidLandChanging(value);
					this.SendPropertyChanging();
					this._idLand = value;
					this.SendPropertyChanged("idLand");
					this.OnidLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="VarChar(50)")]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Land")]
	public partial class Land : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDLand;
		
		private string _Name;
		
		private string _Decrition;
		
		private System.Nullable<int> _IDAcreage;
		
		private System.Nullable<System.Guid> _IDCustomer;
		
		private System.Nullable<int> _IDTypeDetail;
		
		private string _Image;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private string _Decription_mini;
		
		private System.Nullable<bool> _Flag_Approval;
		
		private System.Nullable<int> _IDPrice;
		
		private System.Nullable<bool> _Sell;
		
		private System.Nullable<System.DateTime> _ExpiredDate;
		
		private System.Nullable<decimal> _Price_detail;
		
		private int _IDPost;
		
		private System.Nullable<int> _View;
		
		private System.Nullable<int> _Area_detail;
		
		private System.Nullable<int> _IDDirection;
		
		private System.Nullable<int> _IDStreet;
		
		private System.Nullable<int> _IDWard;
		
		private string _Numhouse;
		
		private EntitySet<Convenient_Detail> _Convenient_Details;
		
		private EntitySet<Follow> _Follows;
		
		private EntitySet<Furiture_detail> _Furiture_details;
		
		private EntitySet<Image_Detail> _Image_Details;
		
		private EntityRef<Acreage> _Acreage;
		
		private EntityRef<Direction> _Direction;
		
		private EntityRef<Ward> _Ward;
		
		private EntityRef<Price> _Price;
		
		private EntityRef<Street> _Street;
		
		private EntityRef<TypeDetail> _TypeDetail;
		
		private EntityRef<TypeDetail> _TypeDetail1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLandChanging(System.Guid value);
    partial void OnIDLandChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDecritionChanging(string value);
    partial void OnDecritionChanged();
    partial void OnIDAcreageChanging(System.Nullable<int> value);
    partial void OnIDAcreageChanged();
    partial void OnIDCustomerChanging(System.Nullable<System.Guid> value);
    partial void OnIDCustomerChanged();
    partial void OnIDTypeDetailChanging(System.Nullable<int> value);
    partial void OnIDTypeDetailChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    partial void OnDecription_miniChanging(string value);
    partial void OnDecription_miniChanged();
    partial void OnFlag_ApprovalChanging(System.Nullable<bool> value);
    partial void OnFlag_ApprovalChanged();
    partial void OnIDPriceChanging(System.Nullable<int> value);
    partial void OnIDPriceChanged();
    partial void OnSellChanging(System.Nullable<bool> value);
    partial void OnSellChanged();
    partial void OnExpiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiredDateChanged();
    partial void OnPrice_detailChanging(System.Nullable<decimal> value);
    partial void OnPrice_detailChanged();
    partial void OnIDPostChanging(int value);
    partial void OnIDPostChanged();
    partial void OnViewChanging(System.Nullable<int> value);
    partial void OnViewChanged();
    partial void OnArea_detailChanging(System.Nullable<int> value);
    partial void OnArea_detailChanged();
    partial void OnIDDirectionChanging(System.Nullable<int> value);
    partial void OnIDDirectionChanged();
    partial void OnIDStreetChanging(System.Nullable<int> value);
    partial void OnIDStreetChanged();
    partial void OnIDWardChanging(System.Nullable<int> value);
    partial void OnIDWardChanged();
    partial void OnNumhouseChanging(string value);
    partial void OnNumhouseChanged();
    #endregion
		
		public Land()
		{
			this._Convenient_Details = new EntitySet<Convenient_Detail>(new Action<Convenient_Detail>(this.attach_Convenient_Details), new Action<Convenient_Detail>(this.detach_Convenient_Details));
			this._Follows = new EntitySet<Follow>(new Action<Follow>(this.attach_Follows), new Action<Follow>(this.detach_Follows));
			this._Furiture_details = new EntitySet<Furiture_detail>(new Action<Furiture_detail>(this.attach_Furiture_details), new Action<Furiture_detail>(this.detach_Furiture_details));
			this._Image_Details = new EntitySet<Image_Detail>(new Action<Image_Detail>(this.attach_Image_Details), new Action<Image_Detail>(this.detach_Image_Details));
			this._Acreage = default(EntityRef<Acreage>);
			this._Direction = default(EntityRef<Direction>);
			this._Ward = default(EntityRef<Ward>);
			this._Price = default(EntityRef<Price>);
			this._Street = default(EntityRef<Street>);
			this._TypeDetail = default(EntityRef<TypeDetail>);
			this._TypeDetail1 = default(EntityRef<TypeDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLand", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDLand
		{
			get
			{
				return this._IDLand;
			}
			set
			{
				if ((this._IDLand != value))
				{
					this.OnIDLandChanging(value);
					this.SendPropertyChanging();
					this._IDLand = value;
					this.SendPropertyChanged("IDLand");
					this.OnIDLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Decrition", DbType="NVarChar(MAX)")]
		public string Decrition
		{
			get
			{
				return this._Decrition;
			}
			set
			{
				if ((this._Decrition != value))
				{
					this.OnDecritionChanging(value);
					this.SendPropertyChanging();
					this._Decrition = value;
					this.SendPropertyChanged("Decrition");
					this.OnDecritionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAcreage", DbType="Int")]
		public System.Nullable<int> IDAcreage
		{
			get
			{
				return this._IDAcreage;
			}
			set
			{
				if ((this._IDAcreage != value))
				{
					if (this._Acreage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAcreageChanging(value);
					this.SendPropertyChanging();
					this._IDAcreage = value;
					this.SendPropertyChanged("IDAcreage");
					this.OnIDAcreageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeDetail", DbType="Int")]
		public System.Nullable<int> IDTypeDetail
		{
			get
			{
				return this._IDTypeDetail;
			}
			set
			{
				if ((this._IDTypeDetail != value))
				{
					if ((this._TypeDetail.HasLoadedOrAssignedValue || this._TypeDetail1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeDetailChanging(value);
					this.SendPropertyChanging();
					this._IDTypeDetail = value;
					this.SendPropertyChanged("IDTypeDetail");
					this.OnIDTypeDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Decription_mini", DbType="NVarChar(400)")]
		public string Decription_mini
		{
			get
			{
				return this._Decription_mini;
			}
			set
			{
				if ((this._Decription_mini != value))
				{
					this.OnDecription_miniChanging(value);
					this.SendPropertyChanging();
					this._Decription_mini = value;
					this.SendPropertyChanged("Decription_mini");
					this.OnDecription_miniChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag_Approval", DbType="Bit")]
		public System.Nullable<bool> Flag_Approval
		{
			get
			{
				return this._Flag_Approval;
			}
			set
			{
				if ((this._Flag_Approval != value))
				{
					this.OnFlag_ApprovalChanging(value);
					this.SendPropertyChanging();
					this._Flag_Approval = value;
					this.SendPropertyChanged("Flag_Approval");
					this.OnFlag_ApprovalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPrice", DbType="Int")]
		public System.Nullable<int> IDPrice
		{
			get
			{
				return this._IDPrice;
			}
			set
			{
				if ((this._IDPrice != value))
				{
					if (this._Price.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPriceChanging(value);
					this.SendPropertyChanging();
					this._IDPrice = value;
					this.SendPropertyChanged("IDPrice");
					this.OnIDPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sell", DbType="Bit")]
		public System.Nullable<bool> Sell
		{
			get
			{
				return this._Sell;
			}
			set
			{
				if ((this._Sell != value))
				{
					this.OnSellChanging(value);
					this.SendPropertyChanging();
					this._Sell = value;
					this.SendPropertyChanged("Sell");
					this.OnSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpiredDate
		{
			get
			{
				return this._ExpiredDate;
			}
			set
			{
				if ((this._ExpiredDate != value))
				{
					this.OnExpiredDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDate = value;
					this.SendPropertyChanged("ExpiredDate");
					this.OnExpiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price_detail", DbType="Money")]
		public System.Nullable<decimal> Price_detail
		{
			get
			{
				return this._Price_detail;
			}
			set
			{
				if ((this._Price_detail != value))
				{
					this.OnPrice_detailChanging(value);
					this.SendPropertyChanging();
					this._Price_detail = value;
					this.SendPropertyChanged("Price_detail");
					this.OnPrice_detailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPost", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int IDPost
		{
			get
			{
				return this._IDPost;
			}
			set
			{
				if ((this._IDPost != value))
				{
					this.OnIDPostChanging(value);
					this.SendPropertyChanging();
					this._IDPost = value;
					this.SendPropertyChanged("IDPost");
					this.OnIDPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[View]", Storage="_View", DbType="Int")]
		public System.Nullable<int> View
		{
			get
			{
				return this._View;
			}
			set
			{
				if ((this._View != value))
				{
					this.OnViewChanging(value);
					this.SendPropertyChanging();
					this._View = value;
					this.SendPropertyChanged("View");
					this.OnViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area_detail", DbType="Int")]
		public System.Nullable<int> Area_detail
		{
			get
			{
				return this._Area_detail;
			}
			set
			{
				if ((this._Area_detail != value))
				{
					this.OnArea_detailChanging(value);
					this.SendPropertyChanging();
					this._Area_detail = value;
					this.SendPropertyChanged("Area_detail");
					this.OnArea_detailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDirection", DbType="Int")]
		public System.Nullable<int> IDDirection
		{
			get
			{
				return this._IDDirection;
			}
			set
			{
				if ((this._IDDirection != value))
				{
					if (this._Direction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDirectionChanging(value);
					this.SendPropertyChanging();
					this._IDDirection = value;
					this.SendPropertyChanged("IDDirection");
					this.OnIDDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStreet", DbType="Int")]
		public System.Nullable<int> IDStreet
		{
			get
			{
				return this._IDStreet;
			}
			set
			{
				if ((this._IDStreet != value))
				{
					if (this._Street.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStreetChanging(value);
					this.SendPropertyChanging();
					this._IDStreet = value;
					this.SendPropertyChanged("IDStreet");
					this.OnIDStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWard", DbType="Int")]
		public System.Nullable<int> IDWard
		{
			get
			{
				return this._IDWard;
			}
			set
			{
				if ((this._IDWard != value))
				{
					if (this._Ward.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDWardChanging(value);
					this.SendPropertyChanging();
					this._IDWard = value;
					this.SendPropertyChanged("IDWard");
					this.OnIDWardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numhouse", DbType="NVarChar(50)")]
		public string Numhouse
		{
			get
			{
				return this._Numhouse;
			}
			set
			{
				if ((this._Numhouse != value))
				{
					this.OnNumhouseChanging(value);
					this.SendPropertyChanging();
					this._Numhouse = value;
					this.SendPropertyChanged("Numhouse");
					this.OnNumhouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Convenient_Detail", Storage="_Convenient_Details", ThisKey="IDLand", OtherKey="IDLand")]
		public EntitySet<Convenient_Detail> Convenient_Details
		{
			get
			{
				return this._Convenient_Details;
			}
			set
			{
				this._Convenient_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Follow", Storage="_Follows", ThisKey="IDLand", OtherKey="IDLand")]
		public EntitySet<Follow> Follows
		{
			get
			{
				return this._Follows;
			}
			set
			{
				this._Follows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Furiture_detail", Storage="_Furiture_details", ThisKey="IDLand", OtherKey="IDLand")]
		public EntitySet<Furiture_detail> Furiture_details
		{
			get
			{
				return this._Furiture_details;
			}
			set
			{
				this._Furiture_details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Land_Image_Detail", Storage="_Image_Details", ThisKey="IDLand", OtherKey="IDLand")]
		public EntitySet<Image_Detail> Image_Details
		{
			get
			{
				return this._Image_Details;
			}
			set
			{
				this._Image_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Acreage_Land", Storage="_Acreage", ThisKey="IDAcreage", OtherKey="IDAcreage", IsForeignKey=true)]
		public Acreage Acreage
		{
			get
			{
				return this._Acreage.Entity;
			}
			set
			{
				Acreage previousValue = this._Acreage.Entity;
				if (((previousValue != value) 
							|| (this._Acreage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Acreage.Entity = null;
						previousValue.Lands.Remove(this);
					}
					this._Acreage.Entity = value;
					if ((value != null))
					{
						value.Lands.Add(this);
						this._IDAcreage = value.IDAcreage;
					}
					else
					{
						this._IDAcreage = default(Nullable<int>);
					}
					this.SendPropertyChanged("Acreage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Direction_Land", Storage="_Direction", ThisKey="IDDirection", OtherKey="IDDirection", IsForeignKey=true)]
		public Direction Direction
		{
			get
			{
				return this._Direction.Entity;
			}
			set
			{
				Direction previousValue = this._Direction.Entity;
				if (((previousValue != value) 
							|| (this._Direction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Direction.Entity = null;
						previousValue.Lands.Remove(this);
					}
					this._Direction.Entity = value;
					if ((value != null))
					{
						value.Lands.Add(this);
						this._IDDirection = value.IDDirection;
					}
					else
					{
						this._IDDirection = default(Nullable<int>);
					}
					this.SendPropertyChanged("Direction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Land", Storage="_Ward", ThisKey="IDWard", OtherKey="IDWard", IsForeignKey=true)]
		public Ward Ward
		{
			get
			{
				return this._Ward.Entity;
			}
			set
			{
				Ward previousValue = this._Ward.Entity;
				if (((previousValue != value) 
							|| (this._Ward.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ward.Entity = null;
						previousValue.Lands.Remove(this);
					}
					this._Ward.Entity = value;
					if ((value != null))
					{
						value.Lands.Add(this);
						this._IDWard = value.IDWard;
					}
					else
					{
						this._IDWard = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ward");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Price_Land", Storage="_Price", ThisKey="IDPrice", OtherKey="IDPrice", IsForeignKey=true)]
		public Price Price
		{
			get
			{
				return this._Price.Entity;
			}
			set
			{
				Price previousValue = this._Price.Entity;
				if (((previousValue != value) 
							|| (this._Price.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Price.Entity = null;
						previousValue.Lands.Remove(this);
					}
					this._Price.Entity = value;
					if ((value != null))
					{
						value.Lands.Add(this);
						this._IDPrice = value.IDPrice;
					}
					else
					{
						this._IDPrice = default(Nullable<int>);
					}
					this.SendPropertyChanged("Price");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_Land", Storage="_Street", ThisKey="IDStreet", OtherKey="IDStreet", IsForeignKey=true)]
		public Street Street
		{
			get
			{
				return this._Street.Entity;
			}
			set
			{
				Street previousValue = this._Street.Entity;
				if (((previousValue != value) 
							|| (this._Street.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Street.Entity = null;
						previousValue.Lands.Remove(this);
					}
					this._Street.Entity = value;
					if ((value != null))
					{
						value.Lands.Add(this);
						this._IDStreet = value.IDStreet;
					}
					else
					{
						this._IDStreet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Street");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDetail_Land", Storage="_TypeDetail", ThisKey="IDTypeDetail", OtherKey="IDTypeDetail", IsForeignKey=true)]
		public TypeDetail TypeDetail
		{
			get
			{
				return this._TypeDetail.Entity;
			}
			set
			{
				TypeDetail previousValue = this._TypeDetail.Entity;
				if (((previousValue != value) 
							|| (this._TypeDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeDetail.Entity = null;
						previousValue.Lands.Remove(this);
					}
					this._TypeDetail.Entity = value;
					if ((value != null))
					{
						value.Lands.Add(this);
						this._IDTypeDetail = value.IDTypeDetail;
					}
					else
					{
						this._IDTypeDetail = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDetail_Land1", Storage="_TypeDetail1", ThisKey="IDTypeDetail", OtherKey="IDTypeDetail", IsForeignKey=true)]
		public TypeDetail TypeDetail1
		{
			get
			{
				return this._TypeDetail1.Entity;
			}
			set
			{
				TypeDetail previousValue = this._TypeDetail1.Entity;
				if (((previousValue != value) 
							|| (this._TypeDetail1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeDetail1.Entity = null;
						previousValue.Lands1.Remove(this);
					}
					this._TypeDetail1.Entity = value;
					if ((value != null))
					{
						value.Lands1.Add(this);
						this._IDTypeDetail = value.IDTypeDetail;
					}
					else
					{
						this._IDTypeDetail = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeDetail1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Convenient_Details(Convenient_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Land = this;
		}
		
		private void detach_Convenient_Details(Convenient_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Land = null;
		}
		
		private void attach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Land = this;
		}
		
		private void detach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Land = null;
		}
		
		private void attach_Furiture_details(Furiture_detail entity)
		{
			this.SendPropertyChanging();
			entity.Land = this;
		}
		
		private void detach_Furiture_details(Furiture_detail entity)
		{
			this.SendPropertyChanging();
			entity.Land = null;
		}
		
		private void attach_Image_Details(Image_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Land = this;
		}
		
		private void detach_Image_Details(Image_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Land = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPrice;
		
		private string _Price1;
		
		private System.Nullable<bool> _Sell;
		
		private EntitySet<Land> _Lands;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPriceChanging(int value);
    partial void OnIDPriceChanged();
    partial void OnPrice1Changing(string value);
    partial void OnPrice1Changed();
    partial void OnSellChanging(System.Nullable<bool> value);
    partial void OnSellChanged();
    #endregion
		
		public Price()
		{
			this._Lands = new EntitySet<Land>(new Action<Land>(this.attach_Lands), new Action<Land>(this.detach_Lands));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPrice", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPrice
		{
			get
			{
				return this._IDPrice;
			}
			set
			{
				if ((this._IDPrice != value))
				{
					this.OnIDPriceChanging(value);
					this.SendPropertyChanging();
					this._IDPrice = value;
					this.SendPropertyChanged("IDPrice");
					this.OnIDPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Price", Storage="_Price1", DbType="NVarChar(50)")]
		public string Price1
		{
			get
			{
				return this._Price1;
			}
			set
			{
				if ((this._Price1 != value))
				{
					this.OnPrice1Changing(value);
					this.SendPropertyChanging();
					this._Price1 = value;
					this.SendPropertyChanged("Price1");
					this.OnPrice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sell", DbType="Bit")]
		public System.Nullable<bool> Sell
		{
			get
			{
				return this._Sell;
			}
			set
			{
				if ((this._Sell != value))
				{
					this.OnSellChanging(value);
					this.SendPropertyChanging();
					this._Sell = value;
					this.SendPropertyChanged("Sell");
					this.OnSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Price_Land", Storage="_Lands", ThisKey="IDPrice", OtherKey="IDPrice")]
		public EntitySet<Land> Lands
		{
			get
			{
				return this._Lands;
			}
			set
			{
				this._Lands.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Price = this;
		}
		
		private void detach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Price = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Street")]
	public partial class Street : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDStreet;
		
		private string _Street1;
		
		private System.Nullable<int> _IDWard;
		
		private EntitySet<Land> _Lands;
		
		private EntityRef<Ward> _Ward;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDStreetChanging(int value);
    partial void OnIDStreetChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnIDWardChanging(System.Nullable<int> value);
    partial void OnIDWardChanged();
    #endregion
		
		public Street()
		{
			this._Lands = new EntitySet<Land>(new Action<Land>(this.attach_Lands), new Action<Land>(this.detach_Lands));
			this._Ward = default(EntityRef<Ward>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStreet", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDStreet
		{
			get
			{
				return this._IDStreet;
			}
			set
			{
				if ((this._IDStreet != value))
				{
					this.OnIDStreetChanging(value);
					this.SendPropertyChanging();
					this._IDStreet = value;
					this.SendPropertyChanged("IDStreet");
					this.OnIDStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Street", Storage="_Street1", DbType="NVarChar(50)")]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWard", DbType="Int")]
		public System.Nullable<int> IDWard
		{
			get
			{
				return this._IDWard;
			}
			set
			{
				if ((this._IDWard != value))
				{
					if (this._Ward.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDWardChanging(value);
					this.SendPropertyChanging();
					this._IDWard = value;
					this.SendPropertyChanged("IDWard");
					this.OnIDWardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_Land", Storage="_Lands", ThisKey="IDStreet", OtherKey="IDStreet")]
		public EntitySet<Land> Lands
		{
			get
			{
				return this._Lands;
			}
			set
			{
				this._Lands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Street", Storage="_Ward", ThisKey="IDWard", OtherKey="IDWard", IsForeignKey=true)]
		public Ward Ward
		{
			get
			{
				return this._Ward.Entity;
			}
			set
			{
				Ward previousValue = this._Ward.Entity;
				if (((previousValue != value) 
							|| (this._Ward.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ward.Entity = null;
						previousValue.Streets.Remove(this);
					}
					this._Ward.Entity = value;
					if ((value != null))
					{
						value.Streets.Add(this);
						this._IDWard = value.IDWard;
					}
					else
					{
						this._IDWard = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ward");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Street = this;
		}
		
		private void detach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.Street = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeDetail")]
	public partial class TypeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDTypeDetail;
		
		private string _TypeNameDetail;
		
		private System.Nullable<bool> _Sell;
		
		private System.Nullable<int> _IDType;
		
		private EntitySet<Land> _Lands;
		
		private EntitySet<Land> _Lands1;
		
		private EntityRef<TypeLand> _TypeLand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTypeDetailChanging(int value);
    partial void OnIDTypeDetailChanged();
    partial void OnTypeNameDetailChanging(string value);
    partial void OnTypeNameDetailChanged();
    partial void OnSellChanging(System.Nullable<bool> value);
    partial void OnSellChanged();
    partial void OnIDTypeChanging(System.Nullable<int> value);
    partial void OnIDTypeChanged();
    #endregion
		
		public TypeDetail()
		{
			this._Lands = new EntitySet<Land>(new Action<Land>(this.attach_Lands), new Action<Land>(this.detach_Lands));
			this._Lands1 = new EntitySet<Land>(new Action<Land>(this.attach_Lands1), new Action<Land>(this.detach_Lands1));
			this._TypeLand = default(EntityRef<TypeLand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDTypeDetail
		{
			get
			{
				return this._IDTypeDetail;
			}
			set
			{
				if ((this._IDTypeDetail != value))
				{
					this.OnIDTypeDetailChanging(value);
					this.SendPropertyChanging();
					this._IDTypeDetail = value;
					this.SendPropertyChanged("IDTypeDetail");
					this.OnIDTypeDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeNameDetail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeNameDetail
		{
			get
			{
				return this._TypeNameDetail;
			}
			set
			{
				if ((this._TypeNameDetail != value))
				{
					this.OnTypeNameDetailChanging(value);
					this.SendPropertyChanging();
					this._TypeNameDetail = value;
					this.SendPropertyChanged("TypeNameDetail");
					this.OnTypeNameDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sell", DbType="Bit")]
		public System.Nullable<bool> Sell
		{
			get
			{
				return this._Sell;
			}
			set
			{
				if ((this._Sell != value))
				{
					this.OnSellChanging(value);
					this.SendPropertyChanging();
					this._Sell = value;
					this.SendPropertyChanged("Sell");
					this.OnSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="Int")]
		public System.Nullable<int> IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					if (this._TypeLand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDetail_Land", Storage="_Lands", ThisKey="IDTypeDetail", OtherKey="IDTypeDetail")]
		public EntitySet<Land> Lands
		{
			get
			{
				return this._Lands;
			}
			set
			{
				this._Lands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDetail_Land1", Storage="_Lands1", ThisKey="IDTypeDetail", OtherKey="IDTypeDetail")]
		public EntitySet<Land> Lands1
		{
			get
			{
				return this._Lands1;
			}
			set
			{
				this._Lands1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeLand_TypeDetail", Storage="_TypeLand", ThisKey="IDType", OtherKey="IDType", IsForeignKey=true)]
		public TypeLand TypeLand
		{
			get
			{
				return this._TypeLand.Entity;
			}
			set
			{
				TypeLand previousValue = this._TypeLand.Entity;
				if (((previousValue != value) 
							|| (this._TypeLand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeLand.Entity = null;
						previousValue.TypeDetails.Remove(this);
					}
					this._TypeLand.Entity = value;
					if ((value != null))
					{
						value.TypeDetails.Add(this);
						this._IDType = value.IDType;
					}
					else
					{
						this._IDType = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeLand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.TypeDetail = this;
		}
		
		private void detach_Lands(Land entity)
		{
			this.SendPropertyChanging();
			entity.TypeDetail = null;
		}
		
		private void attach_Lands1(Land entity)
		{
			this.SendPropertyChanging();
			entity.TypeDetail1 = this;
		}
		
		private void detach_Lands1(Land entity)
		{
			this.SendPropertyChanging();
			entity.TypeDetail1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeLand")]
	public partial class TypeLand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDType;
		
		private string _Type_Name;
		
		private EntitySet<TypeDetail> _TypeDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTypeChanging(int value);
    partial void OnIDTypeChanged();
    partial void OnType_NameChanging(string value);
    partial void OnType_NameChanged();
    #endregion
		
		public TypeLand()
		{
			this._TypeDetails = new EntitySet<TypeDetail>(new Action<TypeDetail>(this.attach_TypeDetails), new Action<TypeDetail>(this.detach_TypeDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Name", DbType="NVarChar(50)")]
		public string Type_Name
		{
			get
			{
				return this._Type_Name;
			}
			set
			{
				if ((this._Type_Name != value))
				{
					this.OnType_NameChanging(value);
					this.SendPropertyChanging();
					this._Type_Name = value;
					this.SendPropertyChanged("Type_Name");
					this.OnType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeLand_TypeDetail", Storage="_TypeDetails", ThisKey="IDType", OtherKey="IDType")]
		public EntitySet<TypeDetail> TypeDetails
		{
			get
			{
				return this._TypeDetails;
			}
			set
			{
				this._TypeDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TypeDetails(TypeDetail entity)
		{
			this.SendPropertyChanging();
			entity.TypeLand = this;
		}
		
		private void detach_TypeDetails(TypeDetail entity)
		{
			this.SendPropertyChanging();
			entity.TypeLand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trousers")]
	public partial class Trouser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDTrousers;
		
		private string _Trousers;
		
		private EntitySet<Ward> _Wards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTrousersChanging(int value);
    partial void OnIDTrousersChanged();
    partial void OnTrousersChanging(string value);
    partial void OnTrousersChanged();
    #endregion
		
		public Trouser()
		{
			this._Wards = new EntitySet<Ward>(new Action<Ward>(this.attach_Wards), new Action<Ward>(this.detach_Wards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTrousers", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDTrousers
		{
			get
			{
				return this._IDTrousers;
			}
			set
			{
				if ((this._IDTrousers != value))
				{
					this.OnIDTrousersChanging(value);
					this.SendPropertyChanging();
					this._IDTrousers = value;
					this.SendPropertyChanged("IDTrousers");
					this.OnIDTrousersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trousers", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Trousers
		{
			get
			{
				return this._Trousers;
			}
			set
			{
				if ((this._Trousers != value))
				{
					this.OnTrousersChanging(value);
					this.SendPropertyChanging();
					this._Trousers = value;
					this.SendPropertyChanged("Trousers");
					this.OnTrousersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trouser_Ward", Storage="_Wards", ThisKey="IDTrousers", OtherKey="IDTrousers")]
		public EntitySet<Ward> Wards
		{
			get
			{
				return this._Wards;
			}
			set
			{
				this._Wards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wards(Ward entity)
		{
			this.SendPropertyChanging();
			entity.Trouser = this;
		}
		
		private void detach_Wards(Ward entity)
		{
			this.SendPropertyChanging();
			entity.Trouser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Overview_Land")]
	public partial class Overview_Land
	{
		
		private System.Guid _IDLand;
		
		private string _Name;
		
		private string _Decrition;
		
		private System.Nullable<System.Guid> _IDCustomer;
		
		private string _Image;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private System.Nullable<bool> _Flag_Approval;
		
		private System.Nullable<bool> _Sell;
		
		private System.Nullable<System.DateTime> _ExpiredDate;
		
		private System.Nullable<decimal> _Price_detail;
		
		private System.Nullable<int> _View;
		
		private System.Nullable<int> _Area_detail;
		
		private string _Acreage;
		
		private string _Numhouse;
		
		private int _IDAcreage;
		
		private int _IDPrice;
		
		private string _Price;
		
		private string _Direction;
		
		private System.Nullable<int> _IDDirection;
		
		private string _CustomerName;
		
		private string _PhoneNumber;
		
		private string _TypeNameDetail;
		
		private System.Nullable<int> _IDType;
		
		private int _IDTrousers;
		
		private string _Trousers;
		
		private string _Ward;
		
		private string _Street;
		
		private System.Nullable<int> _IDStreet;
		
		private int _IDTypeDetail;
		
		private int _IDWard;
		
		public Overview_Land()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLand", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDLand
		{
			get
			{
				return this._IDLand;
			}
			set
			{
				if ((this._IDLand != value))
				{
					this._IDLand = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Decrition", DbType="NVarChar(MAX)")]
		public string Decrition
		{
			get
			{
				return this._Decrition;
			}
			set
			{
				if ((this._Decrition != value))
				{
					this._Decrition = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this._IDCustomer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this._Image = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this._ModifyDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag_Approval", DbType="Bit")]
		public System.Nullable<bool> Flag_Approval
		{
			get
			{
				return this._Flag_Approval;
			}
			set
			{
				if ((this._Flag_Approval != value))
				{
					this._Flag_Approval = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sell", DbType="Bit")]
		public System.Nullable<bool> Sell
		{
			get
			{
				return this._Sell;
			}
			set
			{
				if ((this._Sell != value))
				{
					this._Sell = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpiredDate
		{
			get
			{
				return this._ExpiredDate;
			}
			set
			{
				if ((this._ExpiredDate != value))
				{
					this._ExpiredDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price_detail", DbType="Money")]
		public System.Nullable<decimal> Price_detail
		{
			get
			{
				return this._Price_detail;
			}
			set
			{
				if ((this._Price_detail != value))
				{
					this._Price_detail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[View]", Storage="_View", DbType="Int")]
		public System.Nullable<int> View
		{
			get
			{
				return this._View;
			}
			set
			{
				if ((this._View != value))
				{
					this._View = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area_detail", DbType="Int")]
		public System.Nullable<int> Area_detail
		{
			get
			{
				return this._Area_detail;
			}
			set
			{
				if ((this._Area_detail != value))
				{
					this._Area_detail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Acreage", DbType="VarChar(200)")]
		public string Acreage
		{
			get
			{
				return this._Acreage;
			}
			set
			{
				if ((this._Acreage != value))
				{
					this._Acreage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numhouse", DbType="NVarChar(50)")]
		public string Numhouse
		{
			get
			{
				return this._Numhouse;
			}
			set
			{
				if ((this._Numhouse != value))
				{
					this._Numhouse = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAcreage", DbType="Int NOT NULL")]
		public int IDAcreage
		{
			get
			{
				return this._IDAcreage;
			}
			set
			{
				if ((this._IDAcreage != value))
				{
					this._IDAcreage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPrice", DbType="Int NOT NULL")]
		public int IDPrice
		{
			get
			{
				return this._IDPrice;
			}
			set
			{
				if ((this._IDPrice != value))
				{
					this._IDPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="NVarChar(50)")]
		public string Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="NVarChar(50)")]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this._Direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDirection", DbType="Int")]
		public System.Nullable<int> IDDirection
		{
			get
			{
				return this._IDDirection;
			}
			set
			{
				if ((this._IDDirection != value))
				{
					this._IDDirection = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(30)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this._CustomerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeNameDetail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeNameDetail
		{
			get
			{
				return this._TypeNameDetail;
			}
			set
			{
				if ((this._TypeNameDetail != value))
				{
					this._TypeNameDetail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="Int")]
		public System.Nullable<int> IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					this._IDType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTrousers", DbType="Int NOT NULL")]
		public int IDTrousers
		{
			get
			{
				return this._IDTrousers;
			}
			set
			{
				if ((this._IDTrousers != value))
				{
					this._IDTrousers = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trousers", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Trousers
		{
			get
			{
				return this._Trousers;
			}
			set
			{
				if ((this._Trousers != value))
				{
					this._Trousers = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Ward
		{
			get
			{
				return this._Ward;
			}
			set
			{
				if ((this._Ward != value))
				{
					this._Ward = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(50)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this._Street = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStreet", DbType="Int")]
		public System.Nullable<int> IDStreet
		{
			get
			{
				return this._IDStreet;
			}
			set
			{
				if ((this._IDStreet != value))
				{
					this._IDStreet = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeDetail", DbType="Int NOT NULL")]
		public int IDTypeDetail
		{
			get
			{
				return this._IDTypeDetail;
			}
			set
			{
				if ((this._IDTypeDetail != value))
				{
					this._IDTypeDetail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWard", DbType="Int NOT NULL")]
		public int IDWard
		{
			get
			{
				return this._IDWard;
			}
			set
			{
				if ((this._IDWard != value))
				{
					this._IDWard = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
